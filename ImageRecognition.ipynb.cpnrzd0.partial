{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Image recognition of vehicle's make and model using TensorFlow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.5.5 |Anaconda, Inc.| (default, Apr  7 2018, 04:52:34) [MSC v.1900 64 bit (AMD64)]\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "print (sys.version)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to open tensorboard in jupyter\n",
    "def TB(cleanup=False):\n",
    "    import webbrowser\n",
    "    webbrowser.open('http://127.0.1.1:6006')\n",
    "\n",
    "    !tensorboard --logdir=\"logs\"\n",
    "\n",
    "    if cleanup:\n",
    "        !rm -R logs/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import necessary libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hdf5 is not supported on this machine (please install/reinstall h5py for optimal experience)\n",
      "curses is not supported on this machine (please install/reinstall curses for an optimal experience)\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "from os.path import splitext\n",
    "import numpy as np\n",
    "\n",
    "import tensorflow as tf\n",
    "\n",
    "# Import tflearn and some helpers\n",
    "import tflearn\n",
    "from tflearn.data_utils import shuffle\n",
    "from tflearn.layers.core import input_data, dropout, fully_connected\n",
    "from tflearn.layers.conv import conv_2d, max_pool_2d\n",
    "from tflearn.layers.estimator import regression\n",
    "from tflearn.data_preprocessing import ImagePreprocessing\n",
    "from tflearn.data_augmentation import ImageAugmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir(\"C:/Users/mednche/Desktop/ImageRec/Test\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get name of all images in folder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Working with 105152 images\n",
      "Reduced to 5000 images\n"
     ]
    }
   ],
   "source": [
    "# Get all files in merged folder\n",
    "folder = \"C:/Users/mednche/Desktop/ImageRec/Test\"\n",
    "onlyfiles = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]\n",
    "print(\"Working with {0} images\".format(len(onlyfiles)))\n",
    "\n",
    "# due to low memory available, I restricted the dataset size\n",
    "onlyfiles = onlyfiles[:5000]\n",
    "print(\"Reduced to {0} images\".format(len(onlyfiles)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fetch the labels associated with each images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files in train_files: 5000\n"
     ]
    }
   ],
   "source": [
    "train_files = []\n",
    "y_train =  pd.DataFrame()\n",
    "\n",
    "# import the metadata for the cars\n",
    "data =  pd.read_csv(\"../metadata.csv\")\n",
    "\n",
    "for _file in onlyfiles:\n",
    "    # add file name to list of train_file\n",
    "    train_files.append(_file)\n",
    "    \n",
    "    # remove name extension \n",
    "    file = splitext(_file)[0]\n",
    "    \n",
    "    # get id of vehicle\n",
    "    car_id = file.split(\"_\")[0]\n",
    "    \n",
    "    # get corresponding make\n",
    "    make = data[data.id == car_id].make.tolist()[0]\n",
    "    model = data[data.id == car_id].model.tolist()[0]\n",
    "    name = car_id\n",
    "    \n",
    "    y_train = y_train.append({'name': name, 'make':make, 'model':model}, ignore_index=True)\n",
    "    \n",
    "print(\"Files in train_files: {}\".format(len(train_files)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Check all vehicles have 16 images each (from different angles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>make</th>\n",
       "      <th>model</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0d4b67f458bb</th>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              make  model\n",
       "name                     \n",
       "0d4b67f458bb     8      8"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# number of images per vehicle\n",
    "df = y_train.groupby(y_train.name).count()\n",
    "df[df.make != 16]\n",
    "# Good, all cars have a label attached in \"metadata.csv\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All but one vehicle does not have 16 images (only has 8 images). This is due to the subsampling of 5000 images. We'll still include that car in the training set nontheless for now."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Check that all images have a label in 'metadata.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The dataset has got 5000 images of 313 unique vehicles\n"
     ]
    }
   ],
   "source": [
    "# number of images and vehicles\n",
    "print(\"The dataset has got {} images of {} unique vehicles\".format(len(onlyfiles), len(y_train.name.unique())))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Example of an image and its labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesImage(54,36;334.8x217.44)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\mednche\\AppData\\Local\\Continuum\\anaconda3\\envs\\tensorflow\\lib\\site-packages\\ipykernel_launcher.py:5: DeprecationWarning: `imread` is deprecated!\n",
      "`imread` is deprecated in SciPy 1.0.0, and will be removed in 1.2.0.\n",
      "Use ``imageio.imread`` instead.\n",
      "  \"\"\"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "make            Acura\n",
       "model              TL\n",
       "name     0004d4463b50\n",
       "Name: 0, dtype: object"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example of the first image...\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import misc\n",
    "\n",
    "image = misc.imread(onlyfiles[0])\n",
    "print(plt.imshow(image, cmap=plt.cm.gray))\n",
    "\n",
    "# ...And corresponding labels (make and model)\n",
    "y_train.iloc[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initialise empty array where to add images "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]]],\n",
       "\n",
       "\n",
       "       [[[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]]],\n",
       "\n",
       "\n",
       "       [[[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]]],\n",
       "\n",
       "\n",
       "       ..., \n",
       "       [[[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]]],\n",
       "\n",
       "\n",
       "       [[[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]]],\n",
       "\n",
       "\n",
       "       [[[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]],\n",
       "\n",
       "        [[ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         ..., \n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.]]]])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Open the first image (all images have the same size)\n",
    "from PIL import Image\n",
    "im = Image.open(folder + \"/\" + train_files[0])\n",
    "\n",
    "# set size here\n",
    "size = 450, 450 \n",
    "\n",
    "# resize\n",
    "im.thumbnail(size,Image.ANTIALIAS)\n",
    "\n",
    "# crop\n",
    "img = im.crop((0, 50, im.size[0], im.size[1]))\n",
    "\n",
    "# get final dimentions of all images\n",
    "image_width, image_height = img.size\n",
    "\n",
    "# set number of colour channels \n",
    "channels = 3\n",
    "\n",
    "# for training on coloured images\n",
    "dataset = np.ndarray(shape=(len(train_files), image_height, image_width, channels))\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Add all images to an array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "250 images to array\n",
      "500 images to array\n",
      "750 images to array\n",
      "1000 images to array\n",
      "1250 images to array\n",
      "1500 images to array\n",
      "1750 images to array\n",
      "2000 images to array\n",
      "2250 images to array\n",
      "2500 images to array\n",
      "2750 images to array\n",
      "3000 images to array\n",
      "3250 images to array\n",
      "3500 images to array\n",
      "3750 images to array\n",
      "4000 images to array\n",
      "4250 images to array\n",
      "4500 images to array\n",
      "4750 images to array\n",
      "5000 images to array\n",
      "All images to array!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[[[ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         ..., \n",
       "         [ 230.,  226.,  223.],\n",
       "         [ 230.,  226.,  223.],\n",
       "         [ 230.,  226.,  223.]],\n",
       "\n",
       "        [[ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         ..., \n",
       "         [ 229.,  225.,  222.],\n",
       "         [ 229.,  225.,  222.],\n",
       "         [ 229.,  225.,  222.]],\n",
       "\n",
       "        [[ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         ..., \n",
       "         [ 229.,  225.,  222.],\n",
       "         [ 229.,  225.,  222.],\n",
       "         [ 229.,  225.,  222.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 209.,  207.,  215.],\n",
       "         [ 212.,  211.,  218.],\n",
       "         [ 212.,  211.,  218.],\n",
       "         ..., \n",
       "         [ 225.,  221.,  222.],\n",
       "         [ 224.,  220.,  221.],\n",
       "         [ 224.,  220.,  221.]],\n",
       "\n",
       "        [[ 212.,  212.,  214.],\n",
       "         [ 212.,  212.,  214.],\n",
       "         [ 212.,  212.,  214.],\n",
       "         ..., \n",
       "         [ 225.,  221.,  222.],\n",
       "         [ 225.,  221.,  222.],\n",
       "         [ 225.,  221.,  222.]],\n",
       "\n",
       "        [[ 212.,  212.,  210.],\n",
       "         [ 212.,  212.,  210.],\n",
       "         [ 212.,  212.,  210.],\n",
       "         ..., \n",
       "         [ 235.,  231.,  232.],\n",
       "         [ 235.,  231.,  232.],\n",
       "         [ 235.,  231.,  232.]]],\n",
       "\n",
       "\n",
       "       [[[ 235.,  235.,  235.],\n",
       "         [ 235.,  235.,  235.],\n",
       "         [ 235.,  235.,  235.],\n",
       "         ..., \n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.]],\n",
       "\n",
       "        [[ 235.,  235.,  235.],\n",
       "         [ 235.,  235.,  235.],\n",
       "         [ 235.,  235.,  235.],\n",
       "         ..., \n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.]],\n",
       "\n",
       "        [[ 237.,  235.,  235.],\n",
       "         [ 237.,  235.,  235.],\n",
       "         [ 237.,  235.,  235.],\n",
       "         ..., \n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 210.,  209.,  214.],\n",
       "         [ 210.,  209.,  214.],\n",
       "         [ 212.,  211.,  216.],\n",
       "         ..., \n",
       "         [ 224.,  224.,  224.],\n",
       "         [ 224.,  224.,  224.],\n",
       "         [ 224.,  224.,  224.]],\n",
       "\n",
       "        [[ 212.,  211.,  216.],\n",
       "         [ 212.,  211.,  216.],\n",
       "         [ 212.,  211.,  216.],\n",
       "         ..., \n",
       "         [ 224.,  224.,  224.],\n",
       "         [ 224.,  224.,  224.],\n",
       "         [ 224.,  224.,  224.]],\n",
       "\n",
       "        [[ 212.,  211.,  216.],\n",
       "         [ 212.,  211.,  216.],\n",
       "         [ 212.,  211.,  216.],\n",
       "         ..., \n",
       "         [ 234.,  234.,  234.],\n",
       "         [ 234.,  234.,  234.],\n",
       "         [ 234.,  234.,  234.]]],\n",
       "\n",
       "\n",
       "       [[[ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         ..., \n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.]],\n",
       "\n",
       "        [[ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         ..., \n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.]],\n",
       "\n",
       "        [[ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         [ 238.,  234.,  235.],\n",
       "         ..., \n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.],\n",
       "         [ 231.,  227.,  224.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 209.,  207.,  215.],\n",
       "         [ 212.,  211.,  218.],\n",
       "         [ 212.,  210.,  218.],\n",
       "         ..., \n",
       "         [ 221.,  221.,  221.],\n",
       "         [ 221.,  222.,  221.],\n",
       "         [ 221.,  222.,  221.]],\n",
       "\n",
       "        [[ 212.,  212.,  214.],\n",
       "         [ 212.,  212.,  214.],\n",
       "         [ 212.,  212.,  214.],\n",
       "         ..., \n",
       "         [ 223.,  223.,  223.],\n",
       "         [ 224.,  224.,  224.],\n",
       "         [ 224.,  224.,  224.]],\n",
       "\n",
       "        [[ 212.,  212.,  210.],\n",
       "         [ 212.,  212.,  210.],\n",
       "         [ 212.,  212.,  210.],\n",
       "         ..., \n",
       "         [ 235.,  235.,  235.],\n",
       "         [ 234.,  234.,  234.],\n",
       "         [ 234.,  234.,  234.]]],\n",
       "\n",
       "\n",
       "       ..., \n",
       "       [[[ 255.,  251.,  252.],\n",
       "         [ 255.,  251.,  252.],\n",
       "         [ 255.,  251.,  252.],\n",
       "         ..., \n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.]],\n",
       "\n",
       "        [[ 255.,  251.,  252.],\n",
       "         [ 255.,  251.,  252.],\n",
       "         [ 255.,  251.,  252.],\n",
       "         ..., \n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.]],\n",
       "\n",
       "        [[ 254.,  252.,  252.],\n",
       "         [ 254.,  252.,  252.],\n",
       "         [ 254.,  252.,  252.],\n",
       "         ..., \n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 208.,  201.,  195.],\n",
       "         [ 208.,  201.,  195.],\n",
       "         [ 209.,  202.,  196.],\n",
       "         ..., \n",
       "         [ 206.,  199.,  193.],\n",
       "         [ 206.,  199.,  193.],\n",
       "         [ 206.,  199.,  193.]],\n",
       "\n",
       "        [[ 208.,  201.,  195.],\n",
       "         [ 208.,  201.,  195.],\n",
       "         [ 209.,  202.,  196.],\n",
       "         ..., \n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 206.,  199.,  193.],\n",
       "         [ 206.,  199.,  193.]],\n",
       "\n",
       "        [[ 208.,  201.,  195.],\n",
       "         [ 208.,  201.,  195.],\n",
       "         [ 206.,  199.,  193.],\n",
       "         ..., \n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 206.,  199.,  193.],\n",
       "         [ 206.,  199.,  193.]]],\n",
       "\n",
       "\n",
       "       [[[ 252.,  252.,  252.],\n",
       "         [ 252.,  252.,  252.],\n",
       "         [ 252.,  252.,  252.],\n",
       "         ..., \n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.]],\n",
       "\n",
       "        [[ 252.,  252.,  252.],\n",
       "         [ 252.,  252.,  252.],\n",
       "         [ 252.,  252.,  252.],\n",
       "         ..., \n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.]],\n",
       "\n",
       "        [[ 254.,  252.,  252.],\n",
       "         [ 254.,  252.,  252.],\n",
       "         [ 254.,  252.,  252.],\n",
       "         ..., \n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 208.,  201.,  195.],\n",
       "         [ 208.,  201.,  195.],\n",
       "         [ 209.,  202.,  196.],\n",
       "         ..., \n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 204.,  197.,  191.]],\n",
       "\n",
       "        [[ 208.,  201.,  195.],\n",
       "         [ 208.,  201.,  195.],\n",
       "         [ 207.,  200.,  194.],\n",
       "         ..., \n",
       "         [ 205.,  198.,  192.],\n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 204.,  197.,  191.]],\n",
       "\n",
       "        [[ 208.,  201.,  195.],\n",
       "         [ 208.,  201.,  195.],\n",
       "         [ 204.,  197.,  191.],\n",
       "         ..., \n",
       "         [ 203.,  196.,  190.],\n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 204.,  197.,  191.]]],\n",
       "\n",
       "\n",
       "       [[[ 255.,  251.,  252.],\n",
       "         [ 255.,  251.,  252.],\n",
       "         [ 255.,  251.,  252.],\n",
       "         ..., \n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 244.,  236.,  234.]],\n",
       "\n",
       "        [[ 255.,  251.,  252.],\n",
       "         [ 255.,  251.,  252.],\n",
       "         [ 255.,  251.,  252.],\n",
       "         ..., \n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 243.,  235.,  233.],\n",
       "         [ 243.,  235.,  233.]],\n",
       "\n",
       "        [[ 254.,  252.,  252.],\n",
       "         [ 254.,  252.,  252.],\n",
       "         [ 254.,  252.,  252.],\n",
       "         ..., \n",
       "         [ 244.,  236.,  234.],\n",
       "         [ 243.,  235.,  233.],\n",
       "         [ 243.,  235.,  233.]],\n",
       "\n",
       "        ..., \n",
       "        [[ 208.,  201.,  195.],\n",
       "         [ 208.,  201.,  195.],\n",
       "         [ 209.,  202.,  196.],\n",
       "         ..., \n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 204.,  197.,  191.]],\n",
       "\n",
       "        [[ 208.,  201.,  195.],\n",
       "         [ 208.,  201.,  195.],\n",
       "         [ 207.,  200.,  194.],\n",
       "         ..., \n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 204.,  197.,  191.]],\n",
       "\n",
       "        [[ 208.,  201.,  195.],\n",
       "         [ 208.,  201.,  195.],\n",
       "         [ 204.,  197.,  191.],\n",
       "         ..., \n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 204.,  197.,  191.],\n",
       "         [ 204.,  197.,  191.]]]])"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i = 0\n",
    "for _file in train_files:\n",
    "    #img = load_img(folder + \"/\" + _file)  # this is a PIL image\n",
    "    \n",
    "    \n",
    "    img = Image.open(folder + \"/\" + _file)\n",
    "    # resize\n",
    "    img.thumbnail(size,Image.ANTIALIAS)\n",
    "    # crop top of image to reduce size             \n",
    "    img = img.crop((0, 50, im.size[0], im.size[1]))\n",
    "    #plt.imshow(img, cmap=plt.cm.gray) \n",
    "    \n",
    "    # Convert to Numpy Array\n",
    "    x = np.array(img)  \n",
    "   \n",
    "    # Normalize\n",
    "    dataset[i] = x\n",
    "    i += 1\n",
    "    if i % 250 == 0:\n",
    "        print(\"{} images to array\".format(i))\n",
    "print(\"All images to array!\")\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Recode car labels (make, model, id) into numbers instead of strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>make</th>\n",
       "      <th>model</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4970</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "      <td>310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4971</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "      <td>310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4972</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "      <td>310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4973</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "      <td>310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4974</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "      <td>310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4975</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "      <td>310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4976</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4977</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4978</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4979</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4980</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4981</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4982</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4983</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4984</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4985</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4986</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4987</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4988</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4989</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4990</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4991</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4992</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4993</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4994</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5000 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      make  model  name\n",
       "0        0      0     0\n",
       "1        0      0     0\n",
       "2        0      0     0\n",
       "3        0      0     0\n",
       "4        0      0     0\n",
       "5        0      0     0\n",
       "6        0      0     0\n",
       "7        0      0     0\n",
       "8        0      0     0\n",
       "9        0      0     0\n",
       "10       0      0     0\n",
       "11       0      0     0\n",
       "12       0      0     0\n",
       "13       0      0     0\n",
       "14       0      0     0\n",
       "15       0      0     0\n",
       "16       0      1     1\n",
       "17       0      1     1\n",
       "18       0      1     1\n",
       "19       0      1     1\n",
       "20       0      1     1\n",
       "21       0      1     1\n",
       "22       0      1     1\n",
       "23       0      1     1\n",
       "24       0      1     1\n",
       "25       0      1     1\n",
       "26       0      1     1\n",
       "27       0      1     1\n",
       "28       0      1     1\n",
       "29       0      1     1\n",
       "...    ...    ...   ...\n",
       "4970     4    152   310\n",
       "4971     4    152   310\n",
       "4972     4    152   310\n",
       "4973     4    152   310\n",
       "4974     4    152   310\n",
       "4975     4    152   310\n",
       "4976    17     93   311\n",
       "4977    17     93   311\n",
       "4978    17     93   311\n",
       "4979    17     93   311\n",
       "4980    17     93   311\n",
       "4981    17     93   311\n",
       "4982    17     93   311\n",
       "4983    17     93   311\n",
       "4984    17     93   311\n",
       "4985    17     93   311\n",
       "4986    17     93   311\n",
       "4987    17     93   311\n",
       "4988    17     93   311\n",
       "4989    17     93   311\n",
       "4990    17     93   311\n",
       "4991    17     93   311\n",
       "4992    13    139   312\n",
       "4993    13    139   312\n",
       "4994    13    139   312\n",
       "4995    13    139   312\n",
       "4996    13    139   312\n",
       "4997    13    139   312\n",
       "4998    13    139   312\n",
       "4999    13    139   312\n",
       "\n",
       "[5000 rows x 3 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Associate each unique make with a number\n",
    "maketonumberdict = {}\n",
    "unique_make = y_train.make.unique() \n",
    "for i in range(len(unique_make)):\n",
    "    maketonumberdict[unique_make[i]] = i \n",
    "\n",
    "# Associate each unique model with a number                  \n",
    "modeltonumberdict = {}\n",
    "unique_model = y_train.model.unique() \n",
    "for i in range(len(unique_model)):\n",
    "    modeltonumberdict[unique_model[i]] = i\n",
    "\n",
    "# Associate each unique id string with a number                  \n",
    "idtonumberdict = {}\n",
    "unique_id = y_train.name.unique() \n",
    "for i in range(len(unique_id)):\n",
    "    idtonumberdict[unique_id[i]] = i\n",
    "\n",
    "    \n",
    "def makeAndModelToNumber(mydata, makedict, modeldict, iddict):\n",
    "    mydata_copy = mydata.copy() # make a copy otherwise the changes are made in both df\n",
    "    for i in range(len(mydata_copy['make'])):\n",
    "        mydata_copy.loc[i,'make'] = makedict[mydata_copy.loc[i,'make']]\n",
    "        mydata_copy.loc[i,'model'] = modeldict[mydata_copy.loc[i,'model']]\n",
    "        mydata_copy.loc[i,'name'] = iddict[mydata_copy.loc[i,'name']]\n",
    "    return mydata_copy\n",
    "\n",
    "clean_y_train = makeAndModelToNumber(y_train, maketonumberdict, modeltonumberdict, idtonumberdict)\n",
    "clean_y_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Training the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. With make, model and id"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reset tensorflow graph data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reset underlying graph data\n",
    "tf.reset_default_graph()\n",
    "tf.get_default_graph().get_operations()\n",
    "\n",
    "os.chdir(\"C:/Users/mednche/Desktop/ImageRec/\") # change directory to save checkpoint of model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define network architecture and train model (takes around 30min with 5000 images)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Step: 1961  | total loss: \u001b[1m\u001b[32m1613.56506\u001b[0m\u001b[0m | time: 138.554s\n",
      "\u001b[2K\r",
      "| Adam | epoch: 005 | loss: 1613.56506 -- iter: 3610/4000\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "with tf.Graph().as_default():\n",
    "    \n",
    "    # split data into train and test sets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(dataset, clean_y_train, test_size=0.2, random_state=33)\n",
    "    \n",
    "    # trainx and trainy should be numpy arrays\n",
    "    y_train = np.array(y_train)\n",
    "    y_test = np.array(y_test)\n",
    "    \n",
    "    # Make sure the data is normalized\n",
    "    img_prep = ImagePreprocessing()\n",
    "    img_prep.add_featurewise_zero_center()\n",
    "    img_prep.add_featurewise_stdnorm()\n",
    "\n",
    "\n",
    "    ### Define our network architecture:\n",
    "    \n",
    "    # Input is a tensor: height*width images with 3 color channels (red, green and blue) \n",
    "    \n",
    "    network = input_data(shape=[None, image_height, image_width, channels],\n",
    "                         data_preprocessing=img_prep)\n",
    "    \n",
    "    # Step 1: Convolution\n",
    "    # NB: low level recognises edges and cruves, high level recognises wheels, signs\n",
    "    network = conv_2d(network, 5, 7, activation='relu') # number of filters: 3, filter size 3 \n",
    "    # need downsampling to reduce the size of the image\n",
    "    \n",
    "    # Step 2: Max pooling\n",
    "    network = max_pool_2d(network, 2) # kernel size\n",
    "    \n",
    "    # Step 3\n",
    "    network = conv_2d(network, 5, 3, activation='relu') # number of filters: 3, filter size 3 \n",
    "    \n",
    "    # Step 4: Max pooling\n",
    "    network = max_pool_2d(network, 2) # kernel size\n",
    "                        \n",
    "    # Step 5: Fully-connected 3 node neural network\n",
    "    # Looks at all images for each class and identify the high level features in common\n",
    "    network = fully_connected(network, 3, activation='relu') # number of outputs = number of classes the model has to choose from\n",
    "    \n",
    "    # Step 6: Regression\n",
    "    network = tflearn.regression(network)\n",
    "                             \n",
    "    \n",
    "    # Wrap the network in a model object\n",
    "    model = tflearn.DNN(network, tensorboard_verbose=0, checkpoint_path='/tmp/tflearn_logs/')\n",
    "    \n",
    "    %time model.fit(X_train, y_train, validation_set=(X_test, y_test), show_metric=True, batch_size=10) # batch size of 56 or even 10 is too much\n",
    "    \n",
    "    # Save model when training is complete to a file\n",
    "    model.save(\"carclassifier.tfl\")\n",
    "    \n",
    "    print(\"Network trained and saved as car-classifier.tfl!\")\n",
    "    \n",
    "    score = model.evaluate(X_test, y_test, batch_size=10)\n",
    "    # accuracy: 0.92899999439716341\n",
    "    # loss: 363.87445\n",
    "    \n",
    "    print(\"Accuracy of the model: {}\".format(score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test on a single image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=450x300 at 0x11358550>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "im\n",
    "Image.fromarray(np.array(im), 'RGB') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=450x250 at 0x113582B0>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#test that the test images are now in the right shape\n",
    "img = Image.fromarray(X_test[2], 'RGB')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2, 1, 0]], dtype=int64)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = model.predict_label(X_test[2])\n",
    "\n",
    "# revert the dictionnary for fast query\n",
    "numbertomakedict = {v: k for k, v in maketonumberdict.items()}\n",
    "numbertomodeldict = {v: k for k, v in modeltonumberdict.items()}\n",
    "\n",
    "# print answer of prediciton\n",
    "print(\"Make: {}\".format(numbertomakedict[y_pred[0][1]]))\n",
    "print(\"Model: {}\".format(numbertomodeldict[y_pred[0][2]]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make: Mazda\n",
      "Model: TL\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'Acura',\n",
       " 1: 'Mazda',\n",
       " 2: 'Chevrolet',\n",
       " 3: 'BMW',\n",
       " 4: 'Honda',\n",
       " 5: 'Buick',\n",
       " 6: 'Kia',\n",
       " 7: 'Toyota',\n",
       " 8: 'Hyundai',\n",
       " 9: 'Nissan',\n",
       " 10: 'FIAT',\n",
       " 11: 'Chrysler',\n",
       " 12: 'INFINITI',\n",
       " 13: 'Ford',\n",
       " 14: 'Volkswagen',\n",
       " 15: 'Dodge',\n",
       " 16: 'Jeep',\n",
       " 17: 'Cadillac',\n",
       " 18: 'GMC',\n",
       " 19: 'Lincoln',\n",
       " 20: 'Lexus',\n",
       " 21: 'Jaguar',\n",
       " 22: 'Smart',\n",
       " 23: 'Infiniti',\n",
       " 24: 'Mercedes-Benz',\n",
       " 25: 'Mitsubishi',\n",
       " 26: 'MINI',\n",
       " 27: 'Subaru',\n",
       " 28: 'Audi',\n",
       " 29: 'Land Rover'}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbertomakedict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = model.predict_label(x)\n",
    "y_pred[0][1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor 'ArgMax_5:0' shape=(1, 450, 3) dtype=int64>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict = tf.argmax(x, dimension=1)\n",
    "predict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. With make and model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At this stage, we'll remove the vehicle ID from the labels to keep only make and model. It might be interesting later to add the vehicle ID to the training, to account for the repetitive number of photos from different angle. We'll keep it simple for now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>make</th>\n",
       "      <th>model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4970</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4971</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4972</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4973</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4974</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4975</th>\n",
       "      <td>4</td>\n",
       "      <td>152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4976</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4977</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4978</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4979</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4980</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4981</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4982</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4983</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4984</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4985</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4986</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4987</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4988</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4989</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4990</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4991</th>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4992</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4993</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4994</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>13</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     make model\n",
       "0       0     0\n",
       "1       0     0\n",
       "2       0     0\n",
       "3       0     0\n",
       "4       0     0\n",
       "5       0     0\n",
       "6       0     0\n",
       "7       0     0\n",
       "8       0     0\n",
       "9       0     0\n",
       "10      0     0\n",
       "11      0     0\n",
       "12      0     0\n",
       "13      0     0\n",
       "14      0     0\n",
       "15      0     0\n",
       "16      0     1\n",
       "17      0     1\n",
       "18      0     1\n",
       "19      0     1\n",
       "20      0     1\n",
       "21      0     1\n",
       "22      0     1\n",
       "23      0     1\n",
       "24      0     1\n",
       "25      0     1\n",
       "26      0     1\n",
       "27      0     1\n",
       "28      0     1\n",
       "29      0     1\n",
       "...   ...   ...\n",
       "4970    4   152\n",
       "4971    4   152\n",
       "4972    4   152\n",
       "4973    4   152\n",
       "4974    4   152\n",
       "4975    4   152\n",
       "4976   17    93\n",
       "4977   17    93\n",
       "4978   17    93\n",
       "4979   17    93\n",
       "4980   17    93\n",
       "4981   17    93\n",
       "4982   17    93\n",
       "4983   17    93\n",
       "4984   17    93\n",
       "4985   17    93\n",
       "4986   17    93\n",
       "4987   17    93\n",
       "4988   17    93\n",
       "4989   17    93\n",
       "4990   17    93\n",
       "4991   17    93\n",
       "4992   13   139\n",
       "4993   13   139\n",
       "4994   13   139\n",
       "4995   13   139\n",
       "4996   13   139\n",
       "4997   13   139\n",
       "4998   13   139\n",
       "4999   13   139\n",
       "\n",
       "[5000 rows x 2 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_y_train = clean_y_train.drop(\"name\", axis = 1)\n",
    "clean_y_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reset underlying graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reset underlying graph data\n",
    "tf.reset_default_graph()\n",
    "tf.get_default_graph().get_operations()\n",
    "\n",
    "os.chdir(\"C:/Users/mednche/Desktop/ImageRec/\") # change directory to save checkpoint of model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define network architecture and train model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Step: 19999  | total loss: \u001b[1m\u001b[32m0.00000\u001b[0m\u001b[0m | time: 203.498s\n",
      "| Adam | epoch: 010 | loss: 0.00000 -- iter: 3998/4000\n",
      "Training Step: 20000  | total loss: \u001b[1m\u001b[32m0.00000\u001b[0m\u001b[0m | time: 203.583s\n",
      "| Adam | epoch: 010 | loss: 0.00000 -- iter: 4000/4000\n",
      "--\n",
      "INFO:tensorflow:C:\\Users\\mednche\\Desktop\\ImageRec\\carclassifier.tfl.ckpt-20000 is not in all_model_checkpoint_paths. Manually adding it.\n",
      "INFO:tensorflow:C:\\Users\\mednche\\Desktop\\ImageRec\\carclassifier.tfl is not in all_model_checkpoint_paths. Manually adding it.\n",
      "Network trained and saved as car-classifier.tfl!\n",
      "Accuracy of the model: [0.0010000000149011613]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "with tf.Graph().as_default():\n",
    "    \n",
    "    # split data into train and test sets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(dataset, clean_y_train, test_size=0.2, random_state=33)\n",
    "    \n",
    "    # trainx and trainy should be numpy arrays\n",
    "    y_train = np.array(y_train)\n",
    "    y_test = np.array(y_test)\n",
    "    \n",
    "    # Make sure the data is normalized\n",
    "    img_prep = ImagePreprocessing()\n",
    "    img_prep.add_featurewise_zero_center()\n",
    "    img_prep.add_featurewise_stdnorm()\n",
    "\n",
    "\n",
    "    ### Define our network architecture:\n",
    "    \n",
    "    # Input is a tensor: height*width images with 3 color channels (red, green and blue) \n",
    "    \n",
    "    network = input_data(shape=[None, image_height, image_width, channels],\n",
    "                         data_preprocessing=img_prep)\n",
    "    \n",
    "    # Step 1: Convolution\n",
    "    # NB: low level recognises edges and cruves, high level recognises beaks and paws \n",
    "    network = conv_2d(network, 3, 10, activation='relu') # number of filters: 3, filter size 3 \n",
    "    # need downsampling to reduce the size of the image\n",
    "    \n",
    "    # Step 2: Max pooling\n",
    "    network = max_pool_2d(network, 2) # kernel size\n",
    "                        \n",
    "    # Step 6: Fully-connected 3 node neural network\n",
    "    # Looks at all images for each class and identify the high level features in common\n",
    "    network = fully_connected(network, 2, activation='relu') # number of outputs = number of classes the model has to choose from\n",
    "    \n",
    "    network = tflearn.regression(network)\n",
    "                             \n",
    "    \n",
    "    # Wrap the network in a model object\n",
    "    model = tflearn.DNN(network, tensorboard_verbose=1, checkpoint_path='carclassifier.tfl.ckpt')\n",
    "    \n",
    "    %timeit model.fit(X_train, y_train, batch_size=2) # batch size of 56 or even 10 is too much\n",
    "    \n",
    "    # Save model when training is complete to a file\n",
    "    model.save(\"carclassifier.tfl\")\n",
    "    \n",
    "    print(\"Network trained and saved as car-classifier.tfl!\")\n",
    "    \n",
    "    score = model.evaluate(X_test, y_test, batch_size=10)\n",
    "    # accuracy 0.0010000000149011613\n",
    "    \n",
    "    print(\"Accuracy of the model: {}\".format(score))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluate the performance of the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [1, 2, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [1, 2, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [1, 2, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0],\n",
       "       [2, 1, 0]], dtype=int64)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "y_pred = model.predict_label(X_test[100:140])\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, cohen_kappa_score\n",
    "\n",
    "# predict values\n",
    "img\n",
    "x = np.array(img, dtype=np.float32)\n",
    "x = np.array(x).reshape(1, 250,450,3)\n",
    "\n",
    "X_test\n",
    "\n",
    "y_pred = model.predict_label(X_test[:80]) # cannot handle more (memory load)\n",
    "\n",
    "y_pred\n",
    "y_test[:5]\n",
    "\n",
    "\n",
    "im = Image.open(folder + \"/\" + train_files[0])\n",
    "\n",
    "\n",
    "# Confusion matrix\n",
    "confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Precision \n",
    "precision_score(y_test, y_pred)\n",
    "\n",
    "# Recall\n",
    "recall_score(y_test, y_pred)\n",
    "\n",
    "# F1 score\n",
    "f1_score(y_test,y_pred)\n",
    "\n",
    "# Cohen's kappa\n",
    "cohen_kappa_score(y_test, y_pred)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
